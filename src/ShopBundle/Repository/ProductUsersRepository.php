<?php

namespace ShopBundle\Repository;
use AppBundle\Entity\User;
use AppBundle\Repository\UserRepository;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Mapping\ClassMetadata;

/**
 * productUsersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductUsersRepository extends \Doctrine\ORM\EntityRepository
{
	/**
	 * @var int
	 */
	private $superAdminId = null;

	/**
	 * @return integer
	 */
	public function getSuperAdminId() {
		return $this->superAdminId;
	}


	public function __construct(EntityManager $em,ClassMetadata $class) {

		parent::__construct($em, $class);
		if(null !== $superAdmin = $em->getRepository(User::class)->findSuperAdminUser()){
			$this->superAdminId = $superAdmin->getId();
		}

	}

	public function findAllCompanyProducts(){
		$em = $this->getEntityManager();
		$query = $em->createQuery('SELECT pu , p, pct ,u
										FROM ShopBundle:ProductUsers pu
										JOIN pu.product p
					                    JOIN p.category pct 
										JOIN pu.user u 
										WHERE (pu.promotion IS NULL AND u.id = :id ) OR u.id = :id '
		);
		$query ->setParameter('id', $this->getSuperAdminId());
		return $query->getResult();
	}

	public function findAllUserProducts(){
		$em = $this->getEntityManager();
		$query = $em->createQuery('SELECT pu , p , pct ,u
										FROM ShopBundle:ProductUsers pu
										JOIN pu.product p
										JOIN p.category pct  
										JOIN pu.user u 
										WHERE (u.id != :id) AND (pu.hasSell != 0)'
		);
		$query ->setParameter('id',$this->getSuperAdminId());
		return $query->getResult();
	}

	public function findOneProduct($id){
		$em = $this->getEntityManager();
		$query = $em->createQuery('SELECT pu , p , pct ,u
										FROM ShopBundle:ProductUsers pu
										JOIN pu.product p
										JOIN p.category pct 
										JOIN pu.user u 
										WHERE ( pu.promotion IS NULL AND pu.id = :id ) OR pu.id = :id '
		);
		$query ->setParameter('id', $id);
		
		try{
			return $query->getSingleResult();
		}   catch (\Doctrine\ORM\NoResultException $e) {
			return null;
		}
	}

}

