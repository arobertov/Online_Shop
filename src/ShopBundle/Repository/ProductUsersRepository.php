<?php

namespace ShopBundle\Repository;
use AppBundle\Entity\User;
use AppBundle\Repository\UserRepository;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\Mapping\ClassMetadata;
use ShopBundle\Entity\ProductUsers;

/**
 * productUsersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductUsersRepository extends \Doctrine\ORM\EntityRepository
{

	/**
	 * @var EntityManagerInterface $em
	 */
	private $em;



	/**
	 * ProductUsersRepository constructor.
	 *
	 * @param EntityManagerInterface $em
	 */
	public function __construct(EntityManagerInterface $em ) {
		parent::__construct( $em , new ClassMetadata(ProductUsers::class) );
		$this->em = $em;
	}

	/**
	 * @return integer|null
	 */
	private function getSuperAdminId() {
		if(null !== $superAdmin = $this->em->getRepository(User::class)->findSuperAdminUser()){
			return  $superAdmin->getId();
		}
		return null;
	}

	public function findAllCompanyProducts($colon = 'p.dateCreated' ,$method = 'DESC' ){
		$em = $this->getEntityManager();
		$query = $em->createQuery('SELECT pu , p, pct ,u
										FROM ShopBundle:ProductUsers pu
										JOIN pu.product p
					                    JOIN p.category pct 
										JOIN pu.user u 
										WHERE (pu.promotion IS NULL AND u.id = :id ) OR u.id = :id 
										ORDER BY '.$colon.' '.$method
		);
		$query ->setParameter('id', $this->getSuperAdminId());

		return $query->getResult();
	}

	public function findAllUserProducts(){
		$em = $this->getEntityManager();
		$query = $em->createQuery('SELECT pu , p , pct ,u
										FROM ShopBundle:ProductUsers pu
										JOIN pu.product p
										JOIN p.category pct  
										JOIN pu.user u 
										WHERE (u.id != :id) AND (pu.hasSell != 0)'
		);
		$query ->setParameter('id',$this->getSuperAdminId());
		return $query->getResult();
	}

	public function findOneProduct($id){
		$em = $this->getEntityManager();
		$query = $em->createQuery('SELECT pu ,pr , p , pct ,u
										FROM ShopBundle:ProductUsers pu
										JOIN pu.promotion pr
										JOIN pu.product p
										JOIN p.category pct 
										JOIN pu.user u 
										WHERE ( pu.promotion IS NULL AND pu.id = :id ) OR pu.id = :id '
		);
		$query ->setParameter('id', $id);
		
		try{
			return $query->getSingleResult();
		}   catch (\Doctrine\ORM\NoResultException $e) {
			return null;
		}
	}

	public function updateProductInactivePromotion($ids){
		$query = $this->em->createQuery('UPDATE ShopBundle\Entity\ProductUsers pu
											  SET pu.promotion = NULL 
											  WHERE pu.promotion IN (:ids) '
		);
		$query ->setParameter('ids',$ids);
		return $query->getResult();
	}

	public function checkProductUsersIdsByCategoryAndBiggestPromotions($productIds = null,$overwritePromotionIds){
		 $query = $this->em->createQuery('SELECT pu.id 
											  FROM ShopBundle\Entity\ProductUsers pu
											  WHERE pu.product IN(:prIds) AND 
											  (pu.promotion IN(:overwPrIds) OR pu.promotion IS NULL)
											   '
		 )->setParameter('prIds',$productIds)
		 ->setParameter('overwPrIds',$overwritePromotionIds)
		 ;
		 return $query->getResult();
	}

	public function checkProductUsersIdsAllCategoryAndBiggestPromotions($overwritePromotionIds){
		$query = $this->em->createQuery('SELECT pu.id 
											  FROM ShopBundle\Entity\ProductUsers pu
											  WHERE (pu.promotion IN(:overwPrIds) OR pu.promotion IS NULL)
											   '
		)->setParameter('overwPrIds',$overwritePromotionIds)
		;
		return $query->getResult();
	}

	public function updateProductsSetPromotionCategory($pId,$productUserIds=null){
		$query = $this->em->createQuery('UPDATE ShopBundle\Entity\ProductUsers pu
											 SET pu.promotion = :pid
											 WHERE pu.id IN (:ids)'
		);
		$query ->setParameter('pid',$pId)
			->setParameter('ids',$productUserIds);
		return $query->getResult();
	}

	/**
	 * @param $catId
	 *
	 * @return array
	 */
	public function findAllProductByCategory($catId){
		$query = $this->em->createQuery('SELECT p , pu 
											  FROM ShopBundle\Entity\ProductUsers pu 
											  JOIN pu.product p
											  WHERE p.category = :catId AND pu.user = 1 '
		)->setParameter('catId',$catId);
		return $query->getResult();
	}
}

