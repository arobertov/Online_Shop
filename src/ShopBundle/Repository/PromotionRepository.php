<?php

namespace ShopBundle\Repository;

use Doctrine\ORM\EntityManager;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Mapping\ClassMetadata;
use ShopBundle\Entity\Promotion;

/**
 * PromotionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PromotionRepository extends EntityRepository
{
	/**
	 * @var EntityManagerInterface $em
	 */
	private $em;

	/**
	 * PromotionRepository constructor.
	 *
	 * @param EntityManagerInterface $em
	 * @param ClassMetadata $class
	 */
	public function __construct( EntityManagerInterface $em ,ClassMetadata $class = null) {
		parent::__construct( $em ,
			 $class == null ? new ClassMetadata(Promotion::class) : $class);
		$this->em = $em;
	}

	/**
	 * @param $ids
	 *
	 * @return mixed
	 */
	public function updatePromotionSetIsActive($ids){
		$query = $this->em->createQuery('UPDATE ShopBundle\Entity\Promotion p 
											 SET p.isActive = 1 
											 WHERE p.id IN ( :ids )'
		);
		$query->setParameter('ids',$ids);
		return $query->getResult();
	}

	/**
	 * @param $ids
	 *
	 * @return mixed
	 */
	public function updatePromotionSetIsInactive($ids){
		$query = $this->em->createQuery('UPDATE ShopBundle\Entity\Promotion p 
											 SET p.isActive = 0 
											 WHERE p.id IN ( :ids )'
		);
		$query->setParameter('ids',$ids);
		return $query->getResult();
	}

	/**
	 * @param $discount
	 *
	 * @return mixed
	 */
	public function checkBiggerPromotionDiscount($discount){
		$query = $this->em->createQuery('SELECT p.id
											  FROM ShopBundle\Entity\Promotion p
											  INDEX BY p.id 
											  WHERE p.discount <= :discount'
		)->setParameter('discount',$discount)
		;
		return $query->getResult();
	}
}
